package edu.hist.team3.catering.database;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Class representation of a Job
 */
public class Job extends DatabaseRow {
	// Different columns of the Job-table in the database:
	private final int id;			// id				INT			GENERATED BY DEFAULT AS IDENTITY
	private String name;			// name				VARCHAR(32) NOT NULL
	private double yearlySalary;	// yearly_salary	DOUBLE		NOT NULL
	private double hourlySalary;	// hourly_salary	DOUBLE		NOT NULL
	private double percentSales;	// percent_sales	DOUBLE		NOT NULL

	/**
	 * Constructs a representation of a Job with a specific id
	 * @param id The primary key of the Job
	 */
	protected Job(DatabaseManager manager, int id) {
		super(manager);
		this.id = id;
	}

	/**
	 * Create a new default row in the Job-table.
	 * @param manager	The DatabaseManager for a connection to a database
	 * @return A instance of Employee
	 * @throws SQLException
	 */
	public static Job createDefault(DatabaseManager manager) throws SQLException {
		String sql = "INSERT INTO Job (name, yearly_salary, hourly_salary, percent_sales)" +
				"VALUES ('', 0, 0, 0)";
		Job ret = null;
		try (PreparedStatement ps = manager.prepareStatement(sql, "id")) {
			ps.executeUpdate();
			try (ResultSet rs = ps.getGeneratedKeys()) {
				if (rs.next()) {
					ret = manager.getJob(rs.getInt(1));
				}
			}
		}
		return ret;
	}
	
	@Override
	public void fetch() throws SQLException {
		super.fetch();
		String sql = "SELECT name, yearly_salary, hourly_salary, percent_sales FROM Job WHERE id = " + id;
		try (PreparedStatement ps = getManager().prepareStatement(sql)) {
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next()) {
					this.name = rs.getString(1);
					this.yearlySalary = rs.getDouble(2);
					this.hourlySalary = rs.getDouble(3);
					this.percentSales = rs.getDouble(4);
				}
			}
		}
	}
	
	@Override
	public void commit() throws SQLException {
		super.commit();
		String sql = "UPDATE Job SET ";
		sql += "name = '" + name + "'";
		sql += ", yearly_salary = " + yearlySalary;
		sql += ", hourly_salary = " + hourlySalary;
		sql += ", percent_sales = " + percentSales;
		sql += " WHERE id = " + id;
		try (PreparedStatement ps = getManager().prepareStatement(sql)) {
			ps.executeUpdate();
		}
	}
	
	@Override
	public void remove() throws SQLException {
		super.remove();
		String sql = "DELETE FROM Job WHERE id = " + id;
		try (PreparedStatement ps = getManager().prepareStatement(sql)) {
			ps.executeUpdate();
		}
	}
	
	/**
	 * Gets the ID.
	 * @return The ID
	 */
	public int getId() {
		super.tryFetch();
		return id;
	}

	/**
	 * Gets the name.
	 * @return The name
	 */
	public String getName() {
		super.tryFetch();
		return name;
	}

	/**
	 * Sets the name to a new value.
	 * @param name The new name
	 */
	public void setName(String name) {
		assert(name != null); 			// NOT NULL
		assert(name.length() <= 32); 	// Max length = 32
		super.setChanged();
		this.name = name;
	}

	/**
	 * Gets the yearly salary.
	 * @return The yearly salary
	 */
	public double getYearlySalary() {
		super.tryFetch();
		return yearlySalary;
	}

	/**
	 * Sets the yearly salary to a new value.
	 * @param yearlySalary The new yearly salary
	 */
	public void setYearlySalary(double yearlySalary) {
		super.setChanged();
		this.yearlySalary = yearlySalary;
	}

	/**
	 * Gets the hourly salary.
	 * @return The hourly salary
	 */
	public double getHourlySalary() {
		super.tryFetch();
		return hourlySalary;
	}

	/**
	 * Sets the hourly salary to a new value.
	 * @param hourlySalary The new hourly salary
	 */
	public void setHourlySalary(double hourlySalary) {
		super.setChanged();
		this.hourlySalary = hourlySalary;
	}

	/**
	 * Gets the percentage earned directly of sales.
	 * @return The percentage earned directly of sales
	 */
	public double getPercentSales() {
		super.tryFetch();
		return percentSales;
	}

	/**
	 * Sets the percentage earned directly of sales to a new value.
	 * @param percentSales The new percentage earned directly of sales
	 */
	public void setPercentSales(double percentSales) {
		super.setChanged();
		this.percentSales = percentSales;
	}
	
    @Override
    public boolean equals(Object other) {
		if (other == null || !(other instanceof Job))
            return false;
		return getId() == ((Job)other).getId();
	}

    @Override
	public String toString() {
    	super.tryFetch();
		return "Job[name = '" + name + "'; yearlySalary = " + yearlySalary
				+ "; hourlySalary = " + hourlySalary + "; percentSales = "
                + percentSales + "]";
	}
}
