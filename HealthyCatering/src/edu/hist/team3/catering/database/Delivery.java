package edu.hist.team3.catering.database;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

public class Delivery extends DatabaseRow {
	private final int id;		// id				INT		GENERATED BY DEFAULT AS IDENTITY
	private Customer customer;	// customer_id		INT		NOT NULL
	private Date startDate;		// start_date		DATE	NOT NULL
	private Date endDate;		// end_date			DATE
	private int numDelivered;	// num_delivered	INT		NOT NULL
	private double discount;	// discount			DOUBLE	NOT NULL
	private double sumIncome;	// sum_income		DOUBLE	NOT NULL
	private double sumOutcome; 	// sum_outcome		DOUBLE	NOT NULL
	private final DeliveryDishList dishes = new DeliveryDishList(this);
	
	/**
	 *  A representation of a delivery
	 * @param id Primary key of the delivery
	 */
	protected Delivery(DatabaseManager manager, int id) {
		super(manager);
		this.id = id;
	}
	
	public static Delivery createDefault(DatabaseManager manager, Customer customer) throws SQLException {
		String sql = "INSERT INTO Delivery (CUSTOMER_ID, START_DATE, END_DATE, DAYS_OF_WEEK, NUM_DELIVERED, DISCOUNT, SUM_INCOME, SUM_OUTCOME) " +
						"VALUES (" + customer.getId() + ", '2000-01-01', NULL, 0, 0, 0, 0, 0)";
		Delivery ret = null;
		try (PreparedStatement ps = manager.prepareStatement(sql, "id")) {
			ps.executeUpdate();
			try (ResultSet rs = ps.getGeneratedKeys()) {
				if (rs.next()) {
					ret = new Delivery(manager, rs.getInt(1));
				}
			}
		}
		return ret;
	}
	
	@Override
	public void fetch() {
		//TODO: Give me a body!!!
	}
	
	@Override
	public void commit() {
		//TODO: Give me a body!!!
	}
	
	@Override
	public void remove() throws SQLException {
		super.remove();
		String sql = "DELETE FROM Delivery WHERE id = " + id;
		try (PreparedStatement ps = getManager().prepareStatement(sql)) {
			ps.executeUpdate();
		}
	}

	public int getId() {
		super.tryFetch();
		return id;
	}

	public Customer getCustomer() {
		super.tryFetch();
		return customer;
	}

	public void setCustomer(Customer customer) {
		assert(customer != null); 			// NOT NULL
		super.setChanged();
		this.customer = customer;
	}

	public Date getStartDate() {
		super.tryFetch();
		return startDate;
	}

	public void setStartDate(Date startDate) {
		assert(startDate != null); 			// NOT NULL
		super.setChanged();
		this.startDate = startDate;
	}

	public Date getEndDate() {
		super.tryFetch();
		return endDate;
	}

	public void setEndDate(Date endDate) {
		super.setChanged();
		this.endDate = endDate;
	}

	public int getNumDelivered() {
		super.tryFetch();
		return numDelivered;
	}

	public void setNumDelivered(int numDelivered) {
		super.setChanged();
		this.numDelivered = numDelivered;
	}

	public double getDiscount() {
		super.tryFetch();
		return discount;
	}

	public void setDiscount(double discount) {
		super.setChanged();
		this.discount = discount;
	}

	public double getSumIncome() {
		super.tryFetch();
		return sumIncome;
	}

	public void setSumIncome(double sumIncome) {
		super.setChanged();
		this.sumIncome = sumIncome;
	}

	public double getSumOutcome() {
		super.tryFetch();
		return sumOutcome;
	}

	public void setSumOutcome(double sumOutcome) {
		super.setChanged();
		this.sumOutcome = sumOutcome;
	}
	
	public DeliveryDishList getDishes() {
		assert(!isRemoved());
		return dishes;
	}
	
	public boolean equals(Object other){
		if(other == null || !(other instanceof Delivery)) {
			return false;
		}
		return getId() == ((Delivery)other).getId();
	}
	
	@Override
	public String toString() {
		super.tryFetch(); // We use customerId instead of customer.toString(), otherwise would lead to a infinite loop.
		return "Delivery[id = " + id + "; customerId = " + customer.getId() + "; startDate = " + startDate.toString()
				+ "; endDate = " + endDate.toString() + "; numDelivered = " + numDelivered + "; discount = "
				+ discount + "; sumIncome = " + sumIncome + "; sumOutcome = " + sumOutcome + "; dishes = " + dishes.toString() + "]";
	
	}
}
	

